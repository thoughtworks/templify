package com.thoughtworks.services;

import java.io.File;
import org.apache.maven.plugin.logging.Log;
import com.thoughtworks.config.PlaceholderSettings;
import com.thoughtworks.config.PluginConfig;
import com.thoughtworks.services.logger.LoggerStrategyFactory;
import com.thoughtworks.services.logger.RunnerLogger;

/**
 * Initializes the Maven templify with the given configuration.
 *
 * @field templateDir the directory where the generated template will be created.
 * @field baseDir the base directory of the base project.
 * @field buildDir directory where the intermediate build files will be stored
 * @field destDir directory where the final generated project will be stored
 * @field configuration location of the maven-templify.yml.
 * @field placeholder settings for the template variables
 * @field logger for logging messages during the generation process
 * @throws IllegalArgumentException if any of the parameters are null or empty
 */
public class CreateTemplateCommand {

    private static final String MAVEN_templify_YML = "/maven-templify.yml";
    private String templateDir;
    private File baseDir;
    private String buildDir;
    private String destDir;
    private PluginConfig configuration;
    private PlaceholderSettings placeholder;
    private RunnerLogger logger;

    private CreateTemplateCommand() {}

    public String getConfigFilePath() {
        return this.baseDir + MAVEN_templify_YML;
    }

    public String getTemplateDir() {
        return templateDir;
    }

    public void setTemplateDir(String templateDir) {
        this.templateDir = templateDir;
    }

    public PluginConfig getConfiguration() {
        return configuration;
    }

    public void setConfiguration(PluginConfig configuration) {
        this.configuration = configuration;
    }

    public static String getMaventemplifyYml() {
        return MAVEN_templify_YML;
    }

    public PlaceholderSettings getPlaceholder() {
        return placeholder;
    }

    public void setPlaceholder(PlaceholderSettings placeholder) {
        this.placeholder = placeholder;
    }

    public String getDestDir() {
        return destDir;
    }

    public void setDestDir(String destDir) {
        this.destDir = destDir;
    }

    public File getBaseDir() {
        return baseDir;
    }

    public void setBaseDir(File baseDir) {
        this.baseDir = baseDir;
    }

    public String getBuildDir() {
        return buildDir;
    }

    public void setBuildDir(String buildDir) {
        this.buildDir = buildDir;
    }

    public void setLogger(RunnerLogger logger) {
        this.logger = logger;
    }

    public void setLogger(Log logger) {
        this.logger = new LoggerStrategyFactory().create(logger);
    }

    public RunnerLogger getLogger() {
        if (this.logger == null)
            this.logger = new LoggerStrategyFactory().create();

        return this.logger;
    }

    public static class CreateTemplateCommandBuilder {

        private CreateTemplateCommand request;

        public CreateTemplateCommandBuilder() {
            this.request = new CreateTemplateCommand();
        }

        public CreateTemplateCommandBuilder(CreateTemplateCommand request) {

            this.request = request;
        }

        /**
         * Sets the template directory for the CreateTemplateRequest.
         *
         * @param templateDir the directory path where the template files will be generated by the
         *        plugin.
         * @return the CreateTemplateRequestBuilder instance with the template directory set
         * @throws IllegalArgumentException if the templateDir is null or empty
         */
        public CreateTemplateCommandBuilder withTemplateDir(String templateDir)
                throws IllegalArgumentException {
            if (templateDir == null || templateDir.isEmpty()) {
                throw new IllegalArgumentException("Template directory cannot be null or empty");
            }

            this.request.setTemplateDir(templateDir);
            return this;
        }


        /**
         * Sets the base directory for the template creation request.
         *
         * @param baseDir root folder of the project
         * @return the CreateTemplateRequestBuilder instance
         * @throws IllegalArgumentException if the baseDir is null
         */
        public CreateTemplateCommandBuilder withBaseDir(File baseDir)
                throws IllegalArgumentException {
            if (baseDir == null) {
                throw new IllegalArgumentException("Base directory cannot be null");
            }
            this.request.setBaseDir(baseDir);
            return this;
        }


        /**
         * Sets the build directory for the template.
         *
         * @param buildDir is the directory where the application build files are located or will be
         *        generated
         * @return the CreateTemplateRequestBuilder object
         */
        public CreateTemplateCommandBuilder withBuildDir(String buildDir) {
            this.request.setBuildDir(buildDir);
            return this;
        }


        public CreateTemplateCommandBuilder withDestDir(String destDir) {
            this.request.setDestDir(destDir);
            return this;
        }

        public CreateTemplateCommandBuilder withConfiguration(PluginConfig configuration) {
            this.request.setConfiguration(configuration);
            return this;
        }

        public CreateTemplateCommandBuilder withPlaceholder(PlaceholderSettings placeholder) {
            this.request.setPlaceholder(placeholder);
            return this;
        }

        /**
         * Sets the logger for the CreateTemplateRequestBuilder.
         *
         * @param logger the logger strategy, could be any impl of RunnerLogger
         * @return the CreateTemplateRequestBuilder with the logger set
         *
         */
        public CreateTemplateCommandBuilder withLogger(RunnerLogger logger) {
            this.request.setLogger(logger);
            return this;
        }


        /**
         * Sets the logger for the CreateTemplateRequestBuilder.
         *
         * @param logger withRunner that accepts Maven Log Interface
         * @return the CreateTemplateRequestBuilder with the logger set
         *
         */
        public CreateTemplateCommandBuilder withLogger(Log logger) {
            this.request.setLogger(logger);
            return this;
        }


        public CreateTemplateCommand build() {
            return this.request;
        }

    }
}
